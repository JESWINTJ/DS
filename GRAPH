#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


struct Graph {
    int numVertices;
    struct Node** adjacencyList;
};


struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;
    graph->adjacencyList = (struct Node**)malloc(vertices * sizeof(struct Node));


    for (int i = 0; i < vertices; ++i)
        graph->adjacencyList[i] = NULL;

    return graph;
}


void addEdge(struct Graph* graph, int src, int dest) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = dest;
    newNode->next = graph->adjacencyList[src];
    graph->adjacencyList[src] = newNode;


    newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = src;
    newNode->next = graph->adjacencyList[dest];
    graph->adjacencyList[dest] = newNode;
}

void dfs(struct Graph* graph, int vertex, int* visited) {
    if (!visited[vertex]) {
        printf("%d ", vertex);
        visited[vertex] = 1;

        struct Node* current = graph->adjacencyList[vertex];
        while (current != NULL) {
            int neighbor = current->data;
            dfs(graph, neighbor, visited);
            current = current->next;
        }
    }
}

void bfs(struct Graph* graph, int start) {
    int* visited = (int*)malloc(graph->numVertices * sizeof(int));
    for (int i = 0; i < graph->numVertices; ++i)
        visited[i] = 0;

 
    int queue[graph->numVertices];
   int front = -1, rear = -1;

 
    queue[++rear] = start;
    visited[start] = 1;

    while (front != rear) {
        int currentVertex = queue[++front];
        printf("%d ", currentVertex);

        struct Node* current = graph->adjacencyList[currentVertex];
        while (current != NULL) {
            int neighbor = current->data;
            if (!visited[neighbor]) {
                queue[++rear] = neighbor;
                visited[neighbor] = 1;
            }
            current = current->next;
        }
    }

    free(visited);
}

int main() {
    int vertices, edges;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    struct Graph* graph = createGraph(vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    printf("Enter the edges (src dest):\n");
    for (int i = 0; i < edges; ++i) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    printf("DFS: ");
    int* visitedDFS = (int*)malloc(vertices * sizeof(int));
    for (int i = 0; i < vertices; ++i)
        visitedDFS[i] = 0;
    dfs(graph, 0, visitedDFS);
    printf("\n");

    printf("BFS: ");
    bfs(graph, 0);
    printf("\n");

 
    free(visitedDFS);
    free(graph->adjacencyList);
    free(graph);

    return 0;
}


